{"version":3,"sources":["components/Header.jsx","components/Screen.jsx","components/ButtonKey.jsx","components/ClrButton.jsx","components/CalculatorBasic.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","header","Header","today","Date","toLocaleDateString","CalculatorScreen","div","Screen","props","children","StyledButtonKey","buttontype","ButtonKey","onClick","handleClick","val","value","isNaN","face","ClearButton","ClrButton","handleClear","Calculator","ButtonRow","ButtonsWrapper","CalculatorBasic","addToInput","lastClick","state","input","slice","setState","console","log","handleEqual","evalInput","math","toString","isEvaluated","handleZero","this","Component","App","genArr","Array","from","length","x","i","className","map","el","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ef9d413.chunk.js","sourcesContent":["import React from 'react'\nimport styled from \"styled-components\"\nimport '../fonts.css'\nconst StyledHeader = styled.header`\n    font-family: \"Indie Flower\", cursive;\n    background: #FFF;\n    width: 100%;\n    height: 7em;\n    text-align: center;\n    border-bottom: 1px solid #07A0C3;\n    display:flex;\n    justify-content: flex-end;\n    align-items: center;\n    div {\n        justify-self: flex-end;\n        text-align:left;\n        padding: 0 0.5em;\n        p{\n            color: #086788;\n            margin:  0;\n        }\n    }\n    h1{\n        margin: 0 0 -.5em 0;\n        align-self: flex-end;\n        display:inline-block;\n        flex:8;\n    }\n   \n`\nconst Header =() => {\n    var today  = new Date();\n\n    return (\n        <StyledHeader>\n         <h1>Reactulator</h1>\n            <div>\n                <p>Katy Cassidy</p>\n                <p>React 101, Ms. Covidia</p>\n                <p>{today.toLocaleDateString(\"en-US\")}</p>\n            </div>\n           \n        </StyledHeader>\n    )\n}\nexport default Header","import { prodDependencies } from 'mathjs'\nimport React from 'react'\nimport styled from 'styled-components'\nimport '../fonts.css'\nconst CalculatorScreen = styled.div`\n    border: 2px solid #DD1C1A;\n    font-family: 'Indie Flower', cursive;\n    box-shadow:\n        inset 0 0 2px 2px rgba(185,19,114, 0.9),\n        inset 0 0 3px 5px rgba(107,15,26, 0.8);\n    color: #373d3f;\n    background: transparent;\n    padding: 0.5em 0;\n    width: 315px;\n    padding-right: 0.5em;\n    height: 2.5em;\n    font-size: 2em;\n    display:flex;\n    justify-content: flex-end;\n    align-items: center;\n`\nconst Screen =(props)=> (<CalculatorScreen>{props.children}</CalculatorScreen>)\n\nexport default  Screen","import React from 'react'\nimport styled from 'styled-components';\n\nconst StyledButtonKey = styled.div`\n    display:flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    background: ${props => props.buttontype === \"operator\" ? \"#F0C808\" : \"#07A0C3\"};\n    color: ${props => props.buttontype === \"operator\" ? \"#000\" : \"#fff\"};\n    font-size: 2em;\n    line-height: 2em;\n    height: 2em;\n    width: 2em;\n`\nconst isNotOp = value =>{\n    return !isNaN(value) || value === \"=\" || value === \".\";\n}\nconst ButtonKey = props =><StyledButtonKey onClick={()=>props.handleClick(props.val)} buttontype={`${isNotOp(props.val) ? null : \"operator\"}`}>{props.face}</StyledButtonKey>\n\n\nexport default ButtonKey;","import React from 'react'\nimport styled from \"styled-components\"\n\nconst ClearButton = styled.div`\n    background: #DD1C1A;\n    font-size: 2em;\n    color: #fff;\n    height: 2em;\n    display: flex;\n    align-items: center;\n    border-radius: 2em;\n    justify-content: center;\n`\nconst ClrButton =(props)=> {\n    return (\n        <ClearButton onClick={props.handleClear}>\n            {props.children}\n        </ClearButton>\n    )\n}\nexport default  ClrButton","import React, {Component} from 'react'\nimport Screen from './Screen'\nimport ButtonKey from './ButtonKey'\nimport ClrButton from './ClrButton'\nimport styled from 'styled-components';\nimport * as math from 'mathjs';\n\n\nconst Calculator = styled.div`\n    position: absolute;\n    top: 8em;\n`\nconst ButtonRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 0.6em;\n`\nconst ButtonsWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 315px;\n    padding: 1em;\n    background: #FFF1D0;\n`\n\n\nclass CalculatorBasic extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            input: \"\", \n            isEvaluated: false\n        }\n\n    }\n\n    addToInput=(val)=>{\n        // does not handle 2.3.4 but this is enough for me in a simple calc\n        \n        let lastClick = this.state.input.slice(-1);\n        if (isNaN(val) && isNaN(lastClick)){\n            return;\n        \n        }else{\n            this.setState({\n                input: this.state.input + val\n            });\n            console.log(lastClick)\n        }\n        \n        \n\n    }\n\n    handleEqual=()=>{\n        const evalInput = math.evaluate(this.state.input);\n        \n        this.setState({\n            input:evalInput.toString(),\n            isEvaluated: true\n        })\n    }\n    handleZero=(val)=>{\n       if(!this.state.isEvaluated && this.state.input !== \"\"){\n        this.setState({input: this.state.input + val})\n       }\n       return;\n    }\n\n    render() {\n\n    \n        return (\n            <Calculator>\n                <Screen>{this.state.input}</Screen>\n                <ButtonsWrapper>\n                    <ButtonRow>\n                        <ButtonKey val={\"8\"} face={\"8\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"7\"} face={\"7\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"9\"} face={\"9\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"/\"} face={\"/\"} handleClick={this.addToInput}/>\n                    </ButtonRow>\n                    <ButtonRow>\n                        <ButtonKey val={\"5\"} face={\"5\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"4\"} face={\"4\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"6\"} face={\"6\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"*\"} face={\"x\"} handleClick={this.addToInput}/>\n                    </ButtonRow>\n                    <ButtonRow>\n                        <ButtonKey val={\"1\"} face={\"1\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"2\"} face={\"2\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"3\"} face={\"3\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"-\"} face={\"-\"} handleClick={this.addToInput}/>\n                    </ButtonRow>\n                    <ButtonRow>\n                        <ButtonKey val={\".\"} face={\".\"} handleClick={this.addToInput}/>\n                        <ButtonKey val={\"0\"} face={\"0\"} handleClick={this.handleZero}/>\n                        <ButtonKey val={\"=\"} face={\"=\"} handleClick={this.handleEqual}/>\n                        <ButtonKey val={\"+\"} face={\"+\"} handleClick={this.addToInput}/>\n                    </ButtonRow>\n                    <div>\n                        <ClrButton handleClear={()=>this.setState({input: \"\", isEvaluated: false})}>Clear</ClrButton>\n                    </div>\n                </ButtonsWrapper>\n            </Calculator>\n        )\n    }\n}\n\n\nexport default CalculatorBasic","import React from 'react';\nimport Header from \"./components/Header.jsx\"\nimport CalculatorBasic from \"./components/CalculatorBasic\"\nimport './App.css';\n\nfunction App() {\n\nconst genArr = Array.from({length: 25}, (x, i) => i);\n\nconsole.log(genArr)\n  return (\n    <div className=\"app\">\n        <div className=\"paper\">\n          <div className=\"red-line\"></div>\n          <Header />\n          <div className=\"lined-paper-cont\" >\n            <ul className=\"lined-paper\">\n              {genArr.map((el,i) => {\n              return <li key={el} className=\"lines\"></li>;\n              })}\n            </ul>\n          </div>\n          <CalculatorBasic />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}